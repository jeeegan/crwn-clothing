{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCL1rBIpiTBihv7s1tspPzchooHSZUI25c\",\n  authDomain: \"crwn-db-31150.firebaseapp.com\",\n  projectId: \"crwn-db-31150\",\n  storageBucket: \"crwn-db-31150.appspot.com\",\n  messagingSenderId: \"161737865641\",\n  appId: \"1:161737865641:web:7a26bd5ee1b8fe6e17ecb8\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, documentsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  documentsToAdd.forEach(doc => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, doc);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/jamie/Desktop/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","addCollectionAndDocuments","collectionKey","documentsToAdd","collectionRef","collection","batch","forEach","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,SAAS,EAAE,eAHE;AAIbC,EAAAA,aAAa,EAAE,2BAJF;AAKbC,EAAAA,iBAAiB,EAAE,cALN;AAMbC,EAAAA,KAAK,EAAE;AANM,CAAf;AASA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAqB;AACnB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBV,QAA7B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAACJ,QAAAA,WAAD;AAAcC,QAAAA,KAAd;AAAqBC,QAAAA,SAArB;AAAgC,WAAGV;AAAnC,OAAZ,CAAN;AACD,KAFD,CAEE,OAAMa,GAAN,EAAW;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAED,SAAOZ,OAAP;AACD,CAlBM;AAoBP,OAAO,MAAMe,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,cAAtB,KAAyC;AAChF,QAAMC,aAAa,GAAGjB,SAAS,CAACkB,UAAV,CAAqBH,aAArB,CAAtB;AAEA,QAAMI,KAAK,GAAGnB,SAAS,CAACmB,KAAV,EAAd;AACAH,EAAAA,cAAc,CAACI,OAAf,CAAuBnB,GAAG,IAAI;AAC5B,UAAMoB,SAAS,GAAGJ,aAAa,CAAChB,GAAd,EAAlB;AACAkB,IAAAA,KAAK,CAACT,GAAN,CAAUW,SAAV,EAAqBpB,GAArB;AACD,GAHD;AAKA,SAAO,MAAMkB,KAAK,CAACG,MAAN,EAAb;AACD,CAVM;AAYP,OAAO,MAAMC,+BAA+B,GAAGC,WAAW,IAAI;AAC5D,QAAMC,sBAAsB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAqB1B,GAAG,IAAI;AACzD,UAAM;AAAC2B,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAiB5B,GAAG,CAAC6B,IAAJ,EAAvB;AAEA,WAAO;AACLC,MAAAA,SAAS,EAAEC,SAAS,CAACJ,KAAK,CAACK,WAAN,EAAD,CADf;AAELC,MAAAA,EAAE,EAAEjC,GAAG,CAACiC,EAFH;AAGLN,MAAAA,KAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GAT8B,CAA/B;AAUD,CAXM;AAaPzC,QAAQ,CAAC+C,aAAT,CAAuB9C,MAAvB;AAEA,OAAO,MAAM+C,IAAI,GAAGhD,QAAQ,CAACgD,IAAT,EAAb;AACP,OAAO,MAAMpC,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB;AAEP,MAAMqC,QAAQ,GAAG,IAAIjD,QAAQ,CAACgD,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAejD,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n  apiKey: \"AIzaSyCL1rBIpiTBihv7s1tspPzchooHSZUI25c\",\n  authDomain: \"crwn-db-31150.firebaseapp.com\",\n  projectId: \"crwn-db-31150\",\n  storageBucket: \"crwn-db-31150.appspot.com\",\n  messagingSenderId: \"161737865641\",\n  appId: \"1:161737865641:web:7a26bd5ee1b8fe6e17ecb8\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if(!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if(!snapShot.exists) {\n    const {displayName, email} = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({displayName, email, createdAt, ...additionalData});\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, documentsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  documentsToAdd.forEach(doc => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, doc);\n  }); \n\n  return await batch.commit();\n}\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {title, items} = doc.data();  \n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    }\n  })\n}\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}
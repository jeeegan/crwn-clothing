{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jamie/Desktop/crwn-clothing/src/components/sign-in/sign-in.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport './sign-in-styles.scss';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nconst SignIn = ({\n  googleSignInStart,\n  emailSignInStart\n}) => {\n  _s();\n\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      emailSignInStart\n    } = this.props;\n    const {\n      email,\n      password\n    } = this.state;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({\n      [name]: value\n    });\n  }; //const {googleSignInStart} = this.props;\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"I already have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign-in with your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"email\",\n        type: \"email\",\n        value: userCredentials.email,\n        label: \"email\",\n        required: true,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"password\",\n        type: \"password\",\n        value: userCredentials.password,\n        label: \"password\",\n        required: true,\n        handleChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          value: \"Submit Form\",\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          onClick: googleSignInStart,\n          isGoogleSignIn: true,\n          children: \"Sign in with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignIn, \"ZAY+yiB1/nWYxaEyFbsesoJXH6g=\");\n\n_c = SignIn;\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["/Users/jamie/Desktop/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","props","state","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {connect} from 'react-redux';\n\nimport './sign-in-styles.scss';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport {googleSignInStart, emailSignInStart} from '../../redux/user/user.actions'\n\nconst SignIn = ({googleSignInStart, emailSignInStart}) => {\n  const [userCredentials, setCredentials] = useState({email: '', password: ''});\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {emailSignInStart} = this.props;\n    const {email, password} = this.state;\n\n    emailSignInStart(email, password);\n  }\n\n  const handleChange = event => {\n    const {value, name} = event.target;\n\n    setCredentials({[name]: value});\n  }\n\n  //const {googleSignInStart} = this.props;\n\n  return(\n    <div className='sign-in'>\n      <h2>I already have an account</h2>\n      <span>Sign-in with your email and password</span>\n\n      <form onSubmit={handleSubmit}>\n        <FormInput \n          name=\"email\"\n          type=\"email\"\n          value={userCredentials.email}\n          label=\"email\"\n          required\n          handleChange={handleChange}\n        />\n        <FormInput\n          name=\"password\"\n          type=\"password\"\n          value={userCredentials.password}\n          label=\"password\"\n          required\n          handleChange={handleChange}\n        />\n        <div className='buttons'>\n          <CustomButton type=\"submit\" value=\"Submit Form\">Sign in</CustomButton>\n          <CustomButton type=\"button\" onClick={googleSignInStart} isGoogleSignIn>Sign in with Google</CustomButton>\n        </div>\n      </form>\n    </div>\n  )\n}\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password}))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}